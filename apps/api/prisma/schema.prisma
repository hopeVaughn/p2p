// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Registered users of the application
model User {
  id                    String         @id @default(uuid()) @db.VarChar(36)
  email                 String         @unique
  password              String
  bathrooms             Bathroom[]     @relation("createdBathrooms")
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  userRoles             UserRole[]
  verifiedBathrooms     Bathroom[]     @relation("bathroomVerifications")
  verifiedVerifications Verification[]
  ratedRatings          Rating[]
  reportedReports       Report[]
  userReports           UserReport[]
}

/// Public bathrooms added by users
model Bathroom {
  id                   String         @id @default(uuid()) @db.VarChar(36)
  createdBy            User           @relation(fields: [createdById], references: [id], name: "createdBathrooms")
  createdById          String
  gender               BathroomGender
  stallType            StallType
  wheelchairAccessible Boolean
  stars                Float
  keyRequirement       Boolean
  hoursOfOperation     String
  latitude             Float
  longitude            Float
  address              String
  verifiedByUser       User?          @relation("bathroomVerifications", fields: [verifiedById], references: [id])
  verifiedById         String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  ratings              Rating[]
  reports              Report[]
  verifications        Verification[]

  @@index([latitude, longitude])
}

/// Verification of bathroom by user
model Verification {
  id           String   @id @default(uuid()) @db.VarChar(36)
  bathroom     Bathroom @relation(fields: [bathroomId], references: [id])
  bathroomId   String
  verifiedBy   User     @relation(fields: [verifiedById], references: [id])
  verifiedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

/// Rating of bathroom by user
model Rating {
  id         String   @id @default(uuid()) @db.VarChar(36)
  bathroom   Bathroom @relation(fields: [bathroomId], references: [id])
  bathroomId String
  ratedBy    User     @relation(fields: [ratedById], references: [id])
  ratedById  String
  stars      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

/// Report of false information by user
model Report {
  id           String       @id @default(uuid()) @db.VarChar(36)
  bathroom     Bathroom     @relation(fields: [bathroomId], references: [id])
  bathroomId   String
  reportedBy   User         @relation(fields: [reportedById], references: [id])
  reportedById String
  reason       String
  userReports  UserReport[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Role {
  id        String     @id @default(uuid()) @db.VarChar(36)
  name      RoleName
  userRoles UserRole[]
}

// This UserRole table is a crucial part of the application's role-based access control (RBAC) system. 
// It helps manage user permissions efficiently and securely, making the application more robust, scalable, and secure.

/// Assignment of roles to users
model UserRole {
  id        String   @id @default(uuid()) @db.VarChar(36)
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// UserReport model for reporting false information
model UserReport {
  id        String   @id @default(uuid()) @db.VarChar(36)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  report    Report   @relation(fields: [reportId], references: [id])
  reportId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// User roles (e.g., admin, user, super)
enum RoleName {
  SUPER
  ADMIN
  USER
}

/// Bathroom Gender Options
enum BathroomGender {
  GENDERED
  GENDER_NEUTRAL
  BOTH
}

/// Bathroom Stall Types
enum StallType {
  SINGLE_STALL
  CONNECTED
}
